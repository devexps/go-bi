// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v3.19.4
// source: agent_service/v1/agent.proto

package v1

import (
	context "context"
	http "github.com/devexps/go-micro/v2/transport/http"
	binding "github.com/devexps/go-micro/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the micro package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationReportServicePostReport = "/agent_service.v1.ReportService/PostReport"

type ReportServiceHTTPServer interface {
	PostReport(context.Context, *PostReportRequest) (*PostReportReply, error)
}

func RegisterReportServiceHTTPServer(s *http.Server, srv ReportServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/agent/v1/report", _ReportService_PostReport0_HTTP_Handler(srv))
}

func _ReportService_PostReport0_HTTP_Handler(srv ReportServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PostReportRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReportServicePostReport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PostReport(ctx, req.(*PostReportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PostReportReply)
		return ctx.Result(200, reply)
	}
}

type ReportServiceHTTPClient interface {
	PostReport(ctx context.Context, req *PostReportRequest, opts ...http.CallOption) (rsp *PostReportReply, err error)
}

type ReportServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewReportServiceHTTPClient(client *http.Client) ReportServiceHTTPClient {
	return &ReportServiceHTTPClientImpl{client}
}

func (c *ReportServiceHTTPClientImpl) PostReport(ctx context.Context, in *PostReportRequest, opts ...http.CallOption) (*PostReportReply, error) {
	var out PostReportReply
	pattern := "/agent/v1/report"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationReportServicePostReport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
